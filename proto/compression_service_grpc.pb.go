// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.2
// source: proto/compression_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageCompressionServiceClient is the client API for ImageCompressionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageCompressionServiceClient interface {
	// Compress a single image
	CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageResponse, error)
	// Compress multiple images in a batch
	BatchCompressImages(ctx context.Context, in *BatchCompressRequest, opts ...grpc.CallOption) (*BatchCompressResponse, error)
	// Stream compressed images back to the client
	StreamCompressImages(ctx context.Context, opts ...grpc.CallOption) (ImageCompressionService_StreamCompressImagesClient, error)
	// Get service stats
	GetServiceStats(ctx context.Context, in *ServiceStatsRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error)
}

type imageCompressionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageCompressionServiceClient(cc grpc.ClientConnInterface) ImageCompressionServiceClient {
	return &imageCompressionServiceClient{cc}
}

func (c *imageCompressionServiceClient) CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageResponse, error) {
	out := new(CompressImageResponse)
	err := c.cc.Invoke(ctx, "/compression.ImageCompressionService/CompressImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageCompressionServiceClient) BatchCompressImages(ctx context.Context, in *BatchCompressRequest, opts ...grpc.CallOption) (*BatchCompressResponse, error) {
	out := new(BatchCompressResponse)
	err := c.cc.Invoke(ctx, "/compression.ImageCompressionService/BatchCompressImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageCompressionServiceClient) StreamCompressImages(ctx context.Context, opts ...grpc.CallOption) (ImageCompressionService_StreamCompressImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageCompressionService_ServiceDesc.Streams[0], "/compression.ImageCompressionService/StreamCompressImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageCompressionServiceStreamCompressImagesClient{stream}
	return x, nil
}

type ImageCompressionService_StreamCompressImagesClient interface {
	Send(*CompressImageRequest) error
	Recv() (*CompressImageResponse, error)
	grpc.ClientStream
}

type imageCompressionServiceStreamCompressImagesClient struct {
	grpc.ClientStream
}

func (x *imageCompressionServiceStreamCompressImagesClient) Send(m *CompressImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageCompressionServiceStreamCompressImagesClient) Recv() (*CompressImageResponse, error) {
	m := new(CompressImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageCompressionServiceClient) GetServiceStats(ctx context.Context, in *ServiceStatsRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error) {
	out := new(ServiceStatsResponse)
	err := c.cc.Invoke(ctx, "/compression.ImageCompressionService/GetServiceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageCompressionServiceServer is the server API for ImageCompressionService service.
// All implementations must embed UnimplementedImageCompressionServiceServer
// for forward compatibility
type ImageCompressionServiceServer interface {
	// Compress a single image
	CompressImage(context.Context, *CompressImageRequest) (*CompressImageResponse, error)
	// Compress multiple images in a batch
	BatchCompressImages(context.Context, *BatchCompressRequest) (*BatchCompressResponse, error)
	// Stream compressed images back to the client
	StreamCompressImages(ImageCompressionService_StreamCompressImagesServer) error
	// Get service stats
	GetServiceStats(context.Context, *ServiceStatsRequest) (*ServiceStatsResponse, error)
	mustEmbedUnimplementedImageCompressionServiceServer()
}

// UnimplementedImageCompressionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageCompressionServiceServer struct {
}

func (UnimplementedImageCompressionServiceServer) CompressImage(context.Context, *CompressImageRequest) (*CompressImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompressImage not implemented")
}
func (UnimplementedImageCompressionServiceServer) BatchCompressImages(context.Context, *BatchCompressRequest) (*BatchCompressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCompressImages not implemented")
}
func (UnimplementedImageCompressionServiceServer) StreamCompressImages(ImageCompressionService_StreamCompressImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCompressImages not implemented")
}
func (UnimplementedImageCompressionServiceServer) GetServiceStats(context.Context, *ServiceStatsRequest) (*ServiceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStats not implemented")
}
func (UnimplementedImageCompressionServiceServer) mustEmbedUnimplementedImageCompressionServiceServer() {
}

// UnsafeImageCompressionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageCompressionServiceServer will
// result in compilation errors.
type UnsafeImageCompressionServiceServer interface {
	mustEmbedUnimplementedImageCompressionServiceServer()
}

func RegisterImageCompressionServiceServer(s grpc.ServiceRegistrar, srv ImageCompressionServiceServer) {
	s.RegisterService(&ImageCompressionService_ServiceDesc, srv)
}

func _ImageCompressionService_CompressImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageCompressionServiceServer).CompressImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression.ImageCompressionService/CompressImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageCompressionServiceServer).CompressImage(ctx, req.(*CompressImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageCompressionService_BatchCompressImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCompressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageCompressionServiceServer).BatchCompressImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression.ImageCompressionService/BatchCompressImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageCompressionServiceServer).BatchCompressImages(ctx, req.(*BatchCompressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageCompressionService_StreamCompressImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageCompressionServiceServer).StreamCompressImages(&imageCompressionServiceStreamCompressImagesServer{stream})
}

type ImageCompressionService_StreamCompressImagesServer interface {
	Send(*CompressImageResponse) error
	Recv() (*CompressImageRequest, error)
	grpc.ServerStream
}

type imageCompressionServiceStreamCompressImagesServer struct {
	grpc.ServerStream
}

func (x *imageCompressionServiceStreamCompressImagesServer) Send(m *CompressImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageCompressionServiceStreamCompressImagesServer) Recv() (*CompressImageRequest, error) {
	m := new(CompressImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageCompressionService_GetServiceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageCompressionServiceServer).GetServiceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression.ImageCompressionService/GetServiceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageCompressionServiceServer).GetServiceStats(ctx, req.(*ServiceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageCompressionService_ServiceDesc is the grpc.ServiceDesc for ImageCompressionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageCompressionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compression.ImageCompressionService",
	HandlerType: (*ImageCompressionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompressImage",
			Handler:    _ImageCompressionService_CompressImage_Handler,
		},
		{
			MethodName: "BatchCompressImages",
			Handler:    _ImageCompressionService_BatchCompressImages_Handler,
		},
		{
			MethodName: "GetServiceStats",
			Handler:    _ImageCompressionService_GetServiceStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCompressImages",
			Handler:       _ImageCompressionService_StreamCompressImages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/compression_service.proto",
}
